"""
Script de prueba para la API de an√°lisis de sentimientos
"""

import requests
import json
import time

# URL base de la API (ajustar si cambias el puerto)
BASE_URL = "http://localhost:8000"

def test_health():
    """Prueba el endpoint de salud"""
    print("üîç Probando endpoint de salud...")
    response = requests.get(f"{BASE_URL}/health")
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_analyze_sentiment():
    """Prueba el an√°lisis de sentimientos"""
    print("üòä Probando an√°lisis de sentimientos...")
    
    test_texts = [
        "Me encanta este producto, es fant√°stico!",
        "Este servicio es terrible, muy malo",
        "El clima est√° normal hoy",
        "Estoy muy preocupado por la situaci√≥n econ√≥mica del pa√≠s",
        "¬°Qu√© d√≠a tan hermoso! Todo va perfecto",
        "No me gusta nada esta situaci√≥n, es horrible"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n--- Texto {i} ---")
        print(f"Original: {text}")
        
        payload = {
            "text": text,
            "preprocess": True,
            "analysis_type": "both"
        }
        
        response = requests.post(f"{BASE_URL}/analyze", json=payload)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Sentimiento: {result['sentiment_score']} ({result['sentiment_label']})")
            print(f"‚úÖ Subjetividad: {result['subjectivity_score']}")
            print(f"‚úÖ Texto procesado: {result['processed_text'][:100]}...")
        else:
            print(f"‚ùå Error: {response.status_code} - {response.text}")
        
        time.sleep(0.5)  # Pausa entre requests

def test_detect_negative():
    """Prueba la detecci√≥n espec√≠fica de sentimientos negativos"""
    print("\nüö® Probando detecci√≥n de sentimientos negativos...")
    
    negative_texts = [
        "Esto es terrible",
        "No me gusta nada",
        "Es horrible",
        "Muy malo"
    ]
    
    positive_texts = [
        "Me encanta",
        "Es fant√°stico",
        "Muy bueno",
        "Excelente"
    ]
    
    print("\n--- Textos Negativos ---")
    for text in negative_texts:
        payload = {"text": text}
        response = requests.post(f"{BASE_URL}/detect/negative", json=payload)
        if response.status_code == 200:
            result = response.json()
            print(f"'{text}' -> Negativo: {result['is_negative']} (Score: {result['sentiment_score']})")
    
    print("\n--- Textos Positivos ---")
    for text in positive_texts:
        payload = {"text": text}
        response = requests.post(f"{BASE_URL}/detect/negative", json=payload)
        if response.status_code == 200:
            result = response.json()
            print(f"'{text}' -> Negativo: {result['is_negative']} (Score: {result['sentiment_score']})")

def test_quick_analysis():
    """Prueba el an√°lisis r√°pido sin preprocesamiento"""
    print("\n‚ö° Probando an√°lisis r√°pido...")
    
    text = "Este es un texto de prueba para an√°lisis r√°pido"
    payload = {
        "text": text,
        "preprocess": False,
        "analysis_type": "sentiment"
    }
    
    response = requests.post(f"{BASE_URL}/analyze/quick", json=payload)
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ An√°lisis r√°pido completado")
        print(f"   Sentimiento: {result['sentiment_score']} ({result['sentiment_label']})")
        print(f"   Sin preprocesamiento: {result['processed_text'] == text}")
    else:
        print(f"‚ùå Error: {response.status_code}")

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de la API de An√°lisis de Sentimientos")
    print("=" * 60)
    
    try:
        # Probar que el servidor est√© funcionando
        test_health()
        
        # Ejecutar todas las pruebas
        test_analyze_sentiment()
        test_detect_negative()
        test_quick_analysis()
        
        print("\n" + "=" * 60)
        print("‚úÖ Todas las pruebas completadas!")
        print("\nüìñ Documentaci√≥n disponible en:")
        print(f"   - Swagger UI: {BASE_URL}/docs")
        print(f"   - ReDoc: {BASE_URL}/redoc")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: No se puede conectar al servidor")
        print("   Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:8000")
        print("   Ejecuta: python api_server.py")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
